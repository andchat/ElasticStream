(import java.util.Random)

(defrecord TaskInfo [component-id])

;(.getAllThreadIds a)
;(for [id (.getAllThreadIds a)]
;         (str (.getThreadName (.getThreadInfo a id))))


(def task->usage {1 1.4849, 2 1.4607999, 3 1.454, 4 1.5031999, 5 1.4778, 6 20.0938, 7 21.106901, 8 20.8154, 9 0.0278, 10 0.9513, 11 0.9158, 12 0.9552, 13 0.9689, 14 0.95019996, 15 0.9307, 16 0.9419, 17 26.5616, 18 25.9103, 19 0.1606, 20 0.21579999, 21 0.1783, 22 0.2199, 23 0.217, 24 0.226, 25 0.2533, 26 0.2429, 27 0.2574, 28 0.16499999})

(def unlinked-tasks (atom #{1 2 4 5 6 9 19 21 23 25 27}))
(def clusters (atom {3 9.639801025390625, 2 17.82349967956543, 1 17.730600357055664, 0 11.274299621582031}))

(def tasks (atom (into []
                   (sort-by second
                     (map (fn[a] [a (task->usage a)])
                       @unlinked-tasks)))))

(def cluster-queue (PriorityQueue.
                     (count @clusters)
                     (reify Comparator
                       (compare [this [k1 v1] [k2 v2]]
                         (- v2 v1))
                       (equals [this obj]
                         true
                         ))))

(doall (map #(.offer cluster-queue %) @clusters))
(def unassigned (atom []))
(def cluster->tasks (atom {}))

(import backtype.storm.utils.Treap)
(def treap (Treap.))
(.insert treap 1 70)
(.insert treap 2 60)
(.insert treap 3 50)
(.insert treap 4 40)
(.top treap)
(.poll treap)


(def task->component {1 "3", 2 "3", 3 "3", 4 "3", 5 "3", 6 "2", 7 "2", 8 "2", 9 "__acker", 10 "5", 11 "5", 12 "5", 13 "5", 14 "5", 15 "5", 16 "5", 17 "4", 18 "4", 19 "1", 20 "1", 21 "1", 22 "1", 23 "1", 24 "1", 25 "1", 26 "1", 27 "1", 28 "1"})
(def task->usage {1 1.4562, 2 1.5292001, 3 1.4663999, 4 1.4349, 5 1.4607, 6 19.9119, 7 20.151402, 8 20.207, 9 0.024, 10 0.9008, 11 0.9011, 12 0.9091, 13 0.9189, 14 0.9238, 15 0.9336, 16 0.9405, 17 26.577099, 18 26.5458, 19 0.1498, 20 0.2599, 21 0.1569, 22 0.19139999, 23 0.2202, 24 0.2199, 25 0.2492, 26 0.1483, 27 0.2451, 28 0.1598})
(def ltask+rtask->IPC {[6 5] 2051, [17 16] 2588, [8 17] 5269, [7 17] 5316, [8 18] 5315, [28 6] 841, [6 17] 5109, [7 18] 5326, [27 6] 854, [28 7] 850, [6 18] 5166, [26 6] 833, [27 7] 834, [28 8] 869, [25 6] 842, [26 7] 838, [27 8] 850, [24 6] 855, [25 7] 841, [26 8] 855, [23 6] 851, [24 7] 840, [25 8] 852, [22 6] 863, [23 7] 862, [24 8] 838, [21 6] 841, [22 7] 842, [23 8] 837, [20 6] 854, [21 7] 855, [22 8] 853, [19 6] 832, [20 7] 869, [21 8] 856, [19 7] 893, [20 8] 839, [19 8] 858, [18 10] 2657, [8 1] 2114, [17 10] 2589, [18 11] 2613, [7 1] 2116, [8 2] 2114, [17 11] 2620, [18 12] 2617, [6 1] 2062, [7 2] 2116, [8 3] 2130, [17 12] 2630, [18 13] 2628, [6 2] 2056, [7 3] 2161, [8 4] 2112, [17 13] 2610, [18 14] 2630, [6 3] 2049, [7 4] 2133, [8 5] 2114, [17 14] 2620, [18 15] 2653, [6 4] 2057, [7 5] 2116, [17 15] 2637, [18 16] 2623})
(.clear queue)
(reset! tasks #{})